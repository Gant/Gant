<?xml version="1.0" encoding="UTF-8"?>

<!--
Gant - A Groovy build framework based on scripting Ant tasks.

Copyright Â© 2006-9 Russel Winder

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is
distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing permissions and limitations under the
License.

Author : Russel Winder <russel.winder@concertant.com>
-->

<project name="Gant" default="compile" basedir="." xmlns:artifact="urn:maven-artifact-ant">

  <description>
    This Ant script provides the bootstrap capability to install Gant for the first time for those people
    installing from source who do not have a previous installation of Gant.  If the variable GROOVY_HOME is
    set, a lightweight Gant installation will be created that uses the installed Groovy.  If the variable
    GROOVY_HOME is not set, a standalone installation of Gant will be created.
  </description>

  <!--
      This Ant script also provides targets for continuous integration servers.  Currently active are the
      Codehaus Bamboo build, the Canoo CruiseControl build and the Concertant Buildbot build.  The Bamboo
      and CruiseControl builds assume nothing except that that comes with Gant.  In particular, all the
      Groovy and JUnit jars are brought in from the Maven repository using the Maven Ant task, the jar for
      which is part of the Gant distribution.

      When using a Groovy installation, in order to compile, the Groovy, ASM, Antlr and Commons CLI jars are
      needed.  The ASM and Antlr jars are only needed for Groovy, the Commons CLI is needed for Groovy but
      is also used by Gant directly.  When downloading Groovy use groovy-all to avoid needing ASM and Antlr.
      Need Commons CLI of course.  NB The Ant jar is already in the classpath since Ant is running!
      
      JUnit is needed for compiling and running the tests.
      
      When using the Maven Ant task to pull down all the needed jars, we could just read the POM and use
      those dependencies, but it seems better to explicitly specify them.  Note that we don't need to
      specify transitive dependencies here, the Maven Ant Task takes care of that.
  -->

  <property file="local.build.properties"/>
  <property file="build.properties"/>

  <property name="groovyVersion" value="${groovy16Version}"/>

  <property environment="environment"/>

  <property name="sourceDirectory" value="src/main/groovy"/>
  <property name="testsDirectory" value="src/test/groovy"/>
  <property name="jarfilesDirectory" value="jarfiles"/>
  <property name="scriptsDirectory" value="scripts"/>

  <property name="buildDirectory" value="target_gant"/>
  <property name="buildClassesDirectory" value="${buildDirectory}/classes"/>
  <property name="buildTestClassesDirectory" value="${buildDirectory}/test-classes"/>
  <property name="buildTestReportsDirectory" value="${buildDirectory}/test-reports"/>

  <property name="buildMetadataDirectory" value="${buildClassesDirectory}/META-INF"/>

  <condition property="installDirectoryIsSet">
    <isset property="installDirectory"/>
  </condition>

  <condition property="installStandalone">
    <and>
      <isset property="installDirectoryIsSet"/>
      <not>
        <isset property="environment.GROOVY_HOME"/>
      </not>
    </and>
  </condition>

  <condition property="skipTestsIsSet">
    <istrue value="${skipTests}"/>
  </condition>

  <target name="-checkGroovyHome">
    <!--
        This test is contained in a target so that the test can be completely avoided for the continuous
        integration runs: only check the test for command line invocations, the property is never set for
        continuous integration runs.
    -->
    <condition property="groovyHomeIsSet">
      <isset property="environment.GROOVY_HOME"/>
    </condition>
  </target>

  <target name="-initializeMavenAntTask">
     <path id="mavenAntTaskJarPathId">
      <fileset dir="${jarfilesDirectory}" includes="maven-ant-tasks-${mavenVersion}.jar"/>
    </path>
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant" classpathref="mavenAntTaskJarPathId"/>
  </target>

  <target name="-initializeWithGroovyHome" if="groovyHomeIsSet">
    <echo message="Building with the Groovy installation at $GROOVY_HOME (${environment.GROOVY_HOME})."/>
    <path id="groovyJarPathId">
      <fileset dir="${environment.GROOVY_HOME}/lib" includes="groovy-1.*.jar"/>
    </path>
    <path id="compileJarSetPathId">
      <path refid="groovyJarPathId"/>
      <fileset dir="${environment.GROOVY_HOME}/lib" includes="commons-cli*.jar"/>
      <fileset dir="${environment.GROOVY_HOME}/lib" includes="asm*.jar"/>
      <fileset dir="${environment.GROOVY_HOME}/lib" includes="ant*.jar"/> <!-- Intentionally includes Ant and Antlr jars. -->
    </path>
    <path id="testJarSetPathId">
      <fileset dir="${environment.GROOVY_HOME}/lib" includes="junit*.jar"/>
      <path refid="compileJarSetPathId"/>
    </path>
    <taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpathref="compileJarSetPathId"/>
    <property name="scriptsExtrasDirectory" value="${scriptsDirectory}/bin_requiresGroovy"/>
  </target>

  <target name="-initializeNoGroovyHome" depends="-initializeMavenAntTask" unless="groovyHomeIsSet">
    <echo message="Building without a Groovy installation. Using Groovy ${groovyVersion} from Maven repository."/>
    <artifact:dependencies pathId="groovyJarPathId" filesetId="groovyJarFilesetId">
      <dependency groupId="org.codehaus.groovy" artifactId="groovy-all" version="${groovyVersion}"/>
    </artifact:dependencies>
     <artifact:dependencies pathId="compileJarSet" filesetId="compileJarSetFilesetId">
      <dependency groupId="commons-cli" artifactId="commons-cli" version="${commonsCliVersion}"/>
    </artifact:dependencies>
    <path id="compileJarSetPathId">
      <path refid="groovyJarPathId"/>
      <path refid="compileJarSet"/>
    </path>
    <path id="testJarSetPathId">
      <path refid="compileJarSetPathId"/>
    </path>
    <taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpathref="compileJarSetPathId"/>
    <property name="scriptsExtrasDirectory" value="${scriptsDirectory}/bin_standalone"/>
 </target>

  <target name="-compile">
    <mkdir dir="${buildClassesDirectory}"/>
    <groovyc srcdir="${sourceDirectory}" destdir="${buildClassesDirectory}" fork="true" failonerror="true">
      <classpath>
        <pathelement location="${buildClassesDirectory}"/>
        <path refid="compileJarSetPathId"/>
      </classpath>
      <javac source="5" target="5" debug="on" encoding="UTF-8"/>
    </groovyc>
  </target>

  <target name="-compileTests" depends="-compile">
    <mkdir dir="${buildTestClassesDirectory}"/>
    <groovyc srcdir="${testsDirectory}" destdir="${buildTestClassesDirectory}" fork="true" failonerror="true">
      <classpath>
        <pathelement location="${buildClassesDirectory}"/>
        <path refid="testJarSetPathId"/>
      </classpath>
      <javac source="5" target="5" debug="on" encoding="UTF-8"/>
    </groovyc>
  </target>

  <target name="-test" depends="-initializeMavenAntTask,-compileTests" unless="skipTestsIsSet">
    <mkdir dir="${buildTestReportsDirectory}"/>
    <!--  Only need this file if GROOVY_HOME is not set but write it anyway to save the hassle of decision making. -->
    <echo file="groovyAntTaskTestVersion.properties" message="groovyAntTaskTestVersion = ${groovyVersion}"/>
    <artifact:dependencies pathId="ivyJarPathId">
      <dependency groupId="org.apache.ivy" artifactId="ivy" version="${ivyVersion}"/>
    </artifact:dependencies>
    <path id="testClasspathPathId">
      <pathelement location="${buildTestClassesDirectory}"/>
      <path refid="mavenAntTaskJarPathId"/>
      <path refid="ivyJarPathId"/>
      <path refid="testJarSetPathId"/>
    </path>
    <!-- Forkmode should be once for speed but perTest for safety. -->
    <junit printsummary="yes" fork="true" forkmode="once" failureproperty="testsFailed" includeantruntime="false">
      <!--jvmarg line="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"/-->
      <formatter type="plain"/>
      <formatter type="xml"/> <!-- Must have XML output for the continuous integration builds. -->
      <batchtest todir="${buildTestReportsDirectory}">
        <fileset dir="${buildTestClassesDirectory}" includes="**/*_Test.class" excludes="**/ant/tests/*"/>
      </batchtest>
      <classpath>
        <path refid="testClasspathPathId"/>
        <pathelement location="${buildClassesDirectory}"/>
      </classpath>
    </junit>
    <junit printsummary="yes" fork="true" forkmode="once" failureproperty="testsFailed" includeantruntime="false">
      <formatter type="plain"/>
      <formatter type="xml"/> <!-- Must have XML output for the continuous integration builds. -->
      <batchtest todir="${buildTestReportsDirectory}">
        <fileset dir="${buildTestClassesDirectory}" includes="**/ant/tests/*_Test.class"/>
      </batchtest>
      <classpath>
        <path refid="testClasspathPathId"/>
      </classpath>
    </junit>
    <delete file="groovyAntTaskTestVersion.properties"/>
  </target>

  <target name="-package" depends="-compile,-test" unless="testsFailed">
    <mkdir dir="${buildMetadataDirectory}"/>
    <copy todir="${buildMetadataDirectory}" file="LICENCE.txt"/>
    <manifest file="${buildMetadataDirectory}/MANIFEST.MF">
      <attribute name="Built-By" value="${user.name}"/>
      <attribute name="Extension-Name" value="gant"/>
      <attribute name="Specification-Title" value="Gant: scripting Ant tasks with Groovy."/>
      <attribute name="Specification-Version" value="${gantVersion}"/>
      <attribute name="Specification-Vendor" value="The Codehaus"/>
      <attribute name="Implementation-Title" value="Gant: Scripting Ant tasks with Groovy."/>
      <attribute name="Implementation-Version" value="${gantVersion}"/> 
      <attribute name="Implementation-Vendor" value="The Codehaus"/>
    </manifest>
    <jar destfile="${buildDirectory}/gant-${gantVersion}.jar" basedir="${buildClassesDirectory}" manifest="${buildMetadataDirectory}/MANIFEST.MF"/>
  </target>

  <target name="-installStandalone" if="installStandalone" unless="testsFailed">
    <copy todir="${installDirectory}/lib">
      <fileset refid="groovyJarFilesetId"/>
      <fileset refid="compileJarSetFilesetId"/>
      <mapper type="flatten"/>
    </copy>
  </target>

  <target name="-install" depends="-initializeMavenAntTask,-package,-installStandalone" if="installDirectoryIsSet" unless="testsFailed">
    <pathconvert property="groovyJarName">
      <path refid="groovyJarPathId"/>
      <mapper type="flatten"/>
    </pathconvert>
    <copy todir="${installDirectory}/bin">
      <fileset dir="${scriptsDirectory}/bin"/>
      <fileset dir="${scriptsExtrasDirectory}"/>
      <filterset>
        <filter token="GANT_VERSION" value="${gantVersion}"/>
        <filter token="GROOVYJAR" value="${groovyJarName}"/>
      </filterset>
    </copy>
    <chmod perm="a+x">
      <fileset dir="${installDirectory}/bin" includes="gant*,startGroovy.bat"/>
    </chmod>
     <copy todir="${installDirectory}">
      <fileset dir="${scriptsDirectory}" includes="conf/gant-starter.conf"/>
    </copy>
   <artifact:dependencies filesetId="ivyJarFilesetId">
      <dependency groupId="org.apache.ivy" artifactId="ivy" version="${ivyVersion}"/>
    </artifact:dependencies>
    <copy todir="${installDirectory}/lib">
      <fileset dir="${buildDirectory}" includes="gant*.jar"/>
      <fileset dir="${jarfilesDirectory}" includes="maven-ant-task-${mavenVersion}.jar"/>
      <fileset refid="ivyJarFilesetId"/>
      <mapper type="flatten"/>
    </copy>
  </target>

  <target name="-notInstallable" unless="installDirectoryIsSet">
    <echo message="Property installDirectory is not set, so cannot install.  Set installDirectory in file local.build.properties."/>
  </target>

  <target name="-uninstall" if="installDirectoryIsSet">
    <delete dir="${installDirectory}"/>
  </target>

  <target name="-notUninstallable" unless="installDirectoryIsSet">
    <echo message="Property installDirectory is not set, so cannot uninstall.  Set installDirectory in file local.build.properties."/>
  </target>

  <target name="-commandLineDependencies" depends="-checkGroovyHome,-initializeWithGroovyHome,-initializeNoGroovyHome"/>
  
  <!--
      The targets usable from the command line.
  -->

  <target name="compile" depends="-commandLineDependencies,-compile" description="Compile everything needed for a bootstrap build of Gant."/>
  
  <target name="compileTests" depends="-commandLineDependencies,-compileTests" description="Compile all the tests for a bootstrap build of Gant."/>
  
  <target name="test" depends="-commandLineDependencies,-test" description="Test a boostrap build of Gant."/>
  
  <target name="package" depends="-commandLineDependencies,-package" description="Create the jar file for a bootstrap build of Gant."/>
  
  <target name="install" depends="-commandLineDependencies,-install,-notInstallable" description="Package and then install a boostrap build of Gant.  Install destination must be set in the file local.build.properties."/>
  
  <target name="uninstall" depends="-commandLineDependencies,-uninstall,-notUninstallable" description="Uninstall Gant from installation destination."/>
  
  <target name="clean" description="Clean everything up.">
    <delete dir="${buildDirectory}"/>
    <delete dir="target_forMavenTest"/>
    <delete>
      <fileset dir="." defaultexcludes="false">
        <include name="**/*~"/>
        <include name="texput.log"/>
        <include name="cobertura.ser"/>
      </fileset>
    </delete>
  </target>

  <!-- 
       The targets for the Canoo CruiseControl and Codehaus Bamboo continuous integration servers.
       
       Codehaus Bamboo executes with no GROOVY_HOME set, so there is no point in trying to check for it.
       Use the same invocation not using GROOVY_HOME with Canoo.  However, it may be that this is indirectly
       leading to a problem in one of the Gant Ant task tests.
  -->

  <target name="-ciBuild" depends="clean,-initializeNoGroovyHome,-package"/>
 
  <target name="cruiseControlBuild" depends="-ciBuild"/>

  <target name="bambooBuild" depends="-ciBuild"/>

</project>
