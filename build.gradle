//  Gant -- A Groovy way of scripting Ant tasks.
//
//  Copyright Â© 2008-9 Russel Winder
//
//  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
//  compliance with the License. You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software distributed under the License is
//  distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//  implied. See the License for the specific language governing permissions and limitations under the
//  License.
//
//  Author : Russel Winder <russel.winder@concertant.com>

import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.api.artifacts.repositories.WebdavResolver

artifact = 'gant'
mavenNameExtension = '_groovy'

gantVersion = '1.9.1'
gantPrefix = artifact + '-' + gantVersion

//  Nominate for each supported series of Groovy, exactly which version to use.

groovyArtefactName = 'groovy-all'

groovyVersions = [
  '1.6' : '1.6.7' ,
  '1.7' : '1.7.0'
]

//  One series of Groovy needs using for the standalone distribution. This version of Groovy will be packaged with
//  the "standalone" distribution of Gant.  It will generally be the latest widely available version of Groovy.

groovyStandaloneSeries = '1.7'

//  In order to communicate the version of Groovy being used for a particular test to the Gant Ant task
//  test, a file has to be written with the Groovy version number clearly stated.  Ensure correct data
//  coupling between this and src/test/groovy/org/codehaus/gant/ant/tests/commonBits.xml.

def groovyAntTaskTestVersionPropertyFileContent = 'groovyAntTaskTestVersion =  '
def groovyAntTaskTestVersionPropertyFile = new File ( 'groovyAntTaskTestVersion.properties' )

//  Organize the build using subprojects.  There is a subproject gant which is for the build using the
//  locally installed Groovy and there is one for each version of Groovy obtained from the Maven repository
//  that is supported.  These functions ease doing the iteration over all the subprojects.  NB Gradle
//  requires the directories for each of the subprojects to exist.  There is an assumption that each
//  subproject has its own source, etc.  This build slightly perverts the general approach by using exactly
//  the same source for each subproject, the only difference is the version of Groovy used for compilation.

def forEachDistributionVersion ( Closure c ) {
  for ( String s : groovyVersions.keySet ( ) ) { c ( artifact + mavenNameExtension + s ) }
}
  
def forEachProject ( Closure c ) {
  c ( artifact )
  forEachDistributionVersion ( c )
}

forEachProject { item ->  if ( ! ( new File ( item ) ).isDirectory ( ) ) { ant.mkdir ( dir : item ) } }

distributionTasks = [ ]

// =====================================================================
//
//  Specifications of things for all the (subprojects.

allprojects {
  group =  'org.codehaus.gant'
  version = gantVersion
  bundleVersion = gantVersion
}

subprojects {
  usePlugin ( 'groovy' )
  usePlugin ( 'osgi' )
  sourceCompatibility = 5
  targetCompatibility = 5
  configurations { deployJars }
  sourceSets {
    //  NB All the subprojects are actually using the same source code and this is in a different place so
    //  the location of the source must be specified explicitly.
    main { groovy { srcDir '../src/main/groovy' } }
    test { groovy { srcDir '../src/test/groovy' } }
    integTest { groovy { srcDir '../src/integTest/groovy' } }  
  }
  metaInf << fileTree ( dir : '..' ).matching { include 'LICENCE.txt' }
  def theVendor = 'The Codehaus'
  def theTitle = 'Gant: Scripting Ant tasks with Groovy.'
  configure ( jar.osgi ) {
    name = 'Gant'
    version = gantVersion
    symbolicName = 'gant'
    instruction 'Bundle-Vendor' , theVendor
    instruction 'Bundle-Description' , group
    instruction 'Bundle-DocURL' , 'http://gant.codehaus.org'
    instruction 'Built-By' , System.properties.'user.name'
    instruction 'Extension-Name' , artifact
    instruction 'Specification-Title' , theTitle
    instruction 'Specification-Version' , gantVersion
    instruction 'Specification-Vendor' , theVendor
    instruction 'Implementation-Title' , theTitle
    instruction 'Implementation-Version' , gantVersion
    instruction 'Implementation-Vendor' , theVendor
    instruction 'Export-Package' , '*'
  }
  repositories {
    mavenCentral ( )
    mavenRepo ( urls : 'http://repository.codehaus.org/' )
  }
  dependencies {
    compile (
             'commons-cli:commons-cli:1.2' ,
             'org.apache.ant:ant:1.7.1'
             )
    testCompile ( 'junit:junit:4.7' )
    testRuntime ( 'org.apache.ivy:ivy:2.1.0' )
    deployJars ( 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2' )
  }
  compileGroovy.options.compilerArgs = ['-Xlint']
  test {
    //
    //  The Gant Ant task integration test (which is still a unit test :-( has to know the absolute
    //  locations of certain files.  Because Gradle uses a multi-project build there is an extra level
    //  complexity in paths compared to Eclipse, IntelliJ IDEA or Gant builds because the multi-project
    //  builds happen in subdirectories.  org.codehaus.gant.ant.tests.Gant_Test has a decision to make, it
    //  needs to know whether this is a Gradle build or not.  Use a property.
    //
    options.systemProperties['buildFrameworkIdentifier'] = 'Gradle'
    doLast { groovyAntTaskTestVersionPropertyFile.delete ( ) }
  }
  clean.doLast {
    ant.delete { fileset ( dir : '.' , includes : '**/*~, texput.log' ) }
    ant.delete ( dir :  'target_forMavenTest' )
  }
  task integTest {
    dependsOn ( 'assemble' )
  }
  //task integTest ( type : AntTest , description : 'Run the integration tests.' ) {
  //}
  def packageTitle = 'Gant ' + gantVersion
  def copyrightString = 'Copyright &#169; 2006&#8211;9  The Codehaus.  All Rights Reserved.'
  javadoc {
    options.overview ( 'overview.html' )
    options.showAll ( )
    options.encoding ( 'UTF-8' )
    options.setUse ( true )
    options.author ( true )
    options.version ( true )
    options.windowTitle ( packageTitle )
    options.docTitle ( packageTitle )
    options.footer ( copyrightString )
  }
  javadoc.doFirst {
    javadoc.title = packageTitle
    javadoc.options.docTitle = javadoc.title
  }
  groovydoc {
    //  javadoc task depends on classes task.  groovydoc is not dependent on classes task and seems not to
    //  need it.  Should we put a dependency in for symmetry or rely on it working not to bother?
    ////dependsOn ( 'classes' )
    packageNames = [ 'gant.*' , 'org.codehaus.gant.*' ] // Why have to have this when not needed for javadoc?
    overview = 'overview.html'
    includePrivate = false
    encoding = 'UTF-8'
    use = true
    author = 'true'
    version = 'true'
    windowTitle = packageTitle
    docTitle = packageTitle
    header = packageTitle
    footer = copyrightString
  }
  task documentation ( dependsOn: [ 'javadoc' , 'groovydoc' ] , description : 'Create the API documentation.' )
  defaultTasks ( 'build' ) 
}

// =====================================================================
//
//  Use the locally installed Groovy or the standalone version from the Maven repository.  This subproject
//  is used for local installation and also for generating the documentation.

project ( ':gant' ) {
  //  If the user has GROOVY_HOME set then use that Groovy rather than the one specified in the properties
  //  files.  However we have to fiddle to find the version number.
  def groovyHome = System.getenv ( ).'GROOVY_HOME'
  def groovyLib = null
  if ( groovyHome ) {
    groovyLib = new File ( groovyHome , 'lib' )
    def groovyVersionPatternString = /^groovy-(all-)?([0-9].*)\.jar/
    def items = groovyLib.listFiles ( [ accept : { File dir , String name -> return ( name =~ groovyVersionPatternString ).find ( ) } ] as FilenameFilter )
    assert items 
    groovyVersion = ( items[0].name =~ groovyVersionPatternString )[0][2]
    assert groovyVersion
    repositories { flatDir ( name : 'groovyInstallation' , dirs : [ new File ( groovyHome , 'embeddable' ) , groovyLib ] ) }
    versionMessage = 'Using Groovy version ' + groovyVersion + ' from ' + groovyHome
  }
  else {
    groovyVersion = groovyVersions[groovyStandaloneSeries]
    versionMessage = 'Using Groovy version ' + groovyVersion
  }
  dependencies { groovy ( group : 'org.codehaus.groovy' , name : groovyArtefactName , version : groovyVersion ) }
  compileGroovy.doFirst { println ( '\n\t' + versionMessage +'\n' ) }
  test.doFirst { groovyAntTaskTestVersionPropertyFile.write ( groovyAntTaskTestVersionPropertyFileContent + groovyVersion ) }
  def  installDirectory = '/usr/share/gant'
  try { installDirectory = evaluate ( '"' + gant_installPath + '"' ) }
  catch ( MissingPropertyException mpe ) { /* Intentionally left blank. */ }
  task install ( dependsOn : 'assemble' , description : "Install Gant (compiled against Groovy ${groovyVersion}) to ${installDirectory}." ) << {
    def installBinDirectory = installDirectory + '/bin'
    def scriptsDirectory = '../scripts'
    copy {
      into ( installBinDirectory )
      from ( [ scriptsDirectory + '/bin' , scriptsDirectory + '/bin_requiresGroovy' ] )
      filter ( ReplaceTokens , tokens : [ GROOVYJAR : groovyArtefactName + '-' + groovyVersion + '.jar' ] )
    }
    ant.chmod ( perm : 'a+x' ) { fileset ( dir : installBinDirectory , includes : 'gant*' ) }
    copy {
      into ( installDirectory + '/conf' )
      from ( scriptsDirectory + '/conf/gant-starter.conf' )
    }
    copy {
      into ( installDirectory + '/lib' )
      from ( [ 'build/libs' , '../jarfiles' ] )
    }
  }
  task uninstall ( description : "Delete ${installDirectory} so as to remove the Gant installation." ) << { ant.delete ( dir : installDirectory ) } 
}

// =====================================================================
//
//  The subprojects compiling the source against specific Groovy version from the Maven repository.

ciBuildTasks = [ ]

forEachDistributionVersion { projectName->
  def groovyVersion = groovyVersions[ projectName.replace ( artifact + mavenNameExtension , '' ) ]
  project ( projectName ) {
    usePlugin ( 'maven' )
    dependencies { groovy ( group : 'org.codehaus.groovy' , name : groovyArtefactName , version : groovyVersion ) }
    compileGroovy.doFirst { println ( '\n\tUsing Groovy version ' + groovyVersion + '\n' ) }
    test.doFirst { groovyAntTaskTestVersionPropertyFile.write ( groovyAntTaskTestVersionPropertyFileContent + groovyVersion ) }
    try {
      uploadArchives {
        repositories.mavenDeployer {
          uniqueVersion = false
          configuration = configurations.deployJars
          repository ( url : 'https://dav.codehaus.org/repository/gant' ) {
            authentication ( userName : gant_repoUserName , password : gant_repoPassword )
          }
          snapshotRepository ( url : 'https://dav.codehaus.org/snapshots.repository/gant' ) {
            authentication ( userName: gant_repoUserName , password : gant_repoPassword )
          }
        }
      }
    }
    catch ( Exception e ) { 
      //  If gant_repoUserName and/or gant_repoPassword are not defined, do nothing.
    }
    /*
     *  This approach fails for CI servers.
     *
    gradle.taskGraph.whenReady { graph ->
      if ( graph.hasTask ( uploadArchives ) ) {
        // Ensure these properties are defined.  Fail early if they are not.
        gant_repoUserName
        gant_repoPassword
      }
    }
    *
    */
    binCopySpec = copySpec {
      def scriptsDirectory = '../scripts'
      from ( '..' ) { include ( 'README*' ) }
      into ( 'conf' ) { from ( scriptsDirectory + '/conf' ) { include ( '*.conf' ) } } 
      into ( 'lib' ) {
        from ( libsDir )
        rename ( projectName + '-' + version , artifact + '-' + version + mavenNameExtension + '-' + groovyVersion )
      }
      into ( 'bin' ) {
        fileMode = 0755
        from ( [ scriptsDirectory + '/bin' , scriptsDirectory + '/bin_requiresGroovy' ] )
        filter ( ReplaceTokens , tokens : [ GROOVYJAR : groovyArtefactName + '-' + groovyVersion + '.jar' ] )
      }
    }
    task binTgz ( type : Tar , dependsOn : 'jar' , description : 'Build the distribution tarball.' ) {
      baseName = artifact
      classifier = mavenNameExtension + '-' + groovyVersion
      compression = Compression.GZIP
      into ( gantPrefix ) { from binCopySpec }
    }
    task binZip ( type : Zip , dependsOn : 'jar' , description : 'Build the distribution zip file.' ) {
      baseName = artifact
      classifier = mavenNameExtension + '-' + groovyVersion
      into ( gantPrefix ) { from binCopySpec }
    }
    distributionTasks += [ binTgz , binZip ]
  }
  //  Due to weird effective scoping of projects -- caused by cloning of bindings for projects? -- need to
  //  do the following to get the above tasks into the list defined by the main script.
  distributionTasks += project ( projectName ).distributionTasks
  ciBuildTasks << projectName + ':build'  
}

// =====================================================================
//
//  Create the standalone distribution.

projectNameForStandalone = 'gant_groovy' + groovyStandaloneSeries

standaloneCopySpec = copySpec {
  def scriptsDirectory = 'scripts'
  def projectBase = project ( projectNameForStandalone )
  from ( '.' ) { include ( 'README*' ) }
  into ( 'conf' ) { from ( scriptsDirectory + '/conf' ) { include ( '*.conf' ) } } 
  into ( 'lib' ) {
    from ( projectBase.libsDir )
    from ( projectBase.configurations.runtime )
    from ( 'jarfiles' )
  }
  into ( 'bin' ) {
    fileMode = 0755
    from ( [ scriptsDirectory + '/bin' , scriptsDirectory + '/bin_standalone' ] )
    filter ( ReplaceTokens , tokens : [ GROOVYJAR : groovyArtefactName + '-' + groovyVersions[groovyStandaloneSeries] + '.jar' ] )
  }
}

task standaloneBinTgz ( type : Tar , dependsOn : projectNameForStandalone + ':jar' , description : 'Create a tarball of the standalone distribution.' ) {
  baseName = artifact
  version = gantVersion
  compression = Compression.GZIP
  destinationDir = buildDir
  into ( gantPrefix ) { from standaloneCopySpec }
}

task standaloneBinZip ( type : Zip , dependsOn : projectNameForStandalone + ':jar' , description : 'Create a zip file of the standalone distribution.' ) {
  baseName = artifact
  version = gantVersion
  destinationDir = buildDir
  into ( gantPrefix ) { from standaloneCopySpec }
}

distributionTasks += [ standaloneBinTgz , standaloneBinZip ]

// =====================================================================
//
//  Create the documentation distribution.

task docTgz ( type : Tar , dependsOn : [ ':gant:javadoc' , ':gant:groovydoc' ] , description : 'Create a tarball of the documentation' ) {
  baseName = artifact + '_doc'
  version = gantVersion
  compression = Compression.GZIP
  destinationDir = buildDir
  into ( gantPrefix + '/docs' ) { from ( project ( ':gant' ).docsDir ) }
}

task docZip ( type : Zip , dependsOn : [ ':gant:javadoc' , ':gant:groovydoc' ] , description : 'Create a zip file of the documentation' ) {
  baseName = artifact + '_doc'
  version = gantVersion
  destinationDir = buildDir
  into ( gantPrefix + '/docs' ) { from ( project ( ':gant' ).docsDir ) }
}

distributionTasks += [ docTgz , docZip ]

// =====================================================================
//
//  Create the source distribution.

srcContent = [
  'documentation/' , 'examples/' , 'scripts/' , 'jarfiles/' , 'src/' ,
  'build.gradle' , 'settings.gradle' , 'gradlew' ,'gradlew.bat' , 'wrapper/' ,
  'ciBuild' ,
  'Gant_Trunk.ipr' , 'Gant_Trunk.iws' ,
  '.classpath' , '.project' , '.settings/' ,
  'LICENCE.txt' ,
  'README_Install.txt' ,
  'releaseNotes.txt' ,
]

task srcTgz ( type : Tar , description : 'Create a tarball of the source.' ) {
  baseName = artifact + '_src'
  version = gantVersion
  compression = Compression.GZIP
  destinationDir = buildDir
  into ( gantPrefix ) { from ( projectDir ) { srcContent.each { include it } } }
}

task srcZip ( type : Zip , description : 'Create a zip file of the source.' ) {
  baseName = artifact + '_src'
  version = gantVersion
  destinationDir = buildDir
  into ( gantPrefix ) { from ( projectDir ) { srcContent.each { include it } } }
}

distributionTasks += [ srcTgz , srcZip ]

// =====================================================================
//
//  Configuration for getting all the distribution materials uploaded to Codehaus.

configurations { distribution }

artifacts {
  distributionTasks.each { task -> distribution task }
}

dependencies {
  distribution ( 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2' )
}

task buildDistribution ( dependsOn : distributionTasks , description : 'Build all the uploadable distribution archives.' )

task uploadDistribution ( type : Upload , dependsOn : buildDistribution , description : 'Upload all the distribution archives.' ) {
  configuration = configurations.distribution
//uploadDistribution {
//  dependsOn ( buildDistribution )
  uploadDescriptor = false
  doFirst {
    try {
      it.repositories.add ( new WebdavResolver ( ) ) {
        name = 'gantReleases'
        user = gant_repoUserName
        userPassword = gant_repoPassword
        addArtifactPattern ( 'https://dav.codehaus.org/' + ( gantVersion.contains ( 'SNAPSHOT' ) ? 'snapshots.' : '' ) + 'dist/gant/distributions/[artifact]-[revision](-[classifier]).[ext]' )
      }
    }
    catch ( Exception e ) {
      //  If gant_repoUserName and/or gant_repoPassword are not defined, do nothing.
    }
  }
}

/*
 *  This approach fails for CI servers.
 *
gradle.taskGraph.whenReady { graph ->
  if ( graph.hasTask ( uploadDistribution ) ) {
    // Ensure these properties are defined.  Fail early if they are not.
    gant_repoUserName
    gant_repoPassword
  }
}
*
*/

// =====================================================================
//
//  Odds and sods.

task ciBuild ( description : 'Run just the builds that use Groovy from the Maven repository.  Used mainly on CI servers.' , dependsOn : ciBuildTasks )

task wrapper ( type : Wrapper ) {
    gradleVersion = '0.9-20091231101539+1100'
    jarPath = 'wrapper'
}

task clobber ( description : 'Do a really detailed clean.' ) << {
  forEachProject { item -> ant.delete ( dir : item ) }
  ant.delete ( dir : buildDir )
  ant.delete { fileset ( dir : '.' , includes : 'texput.log,**/*~,' + groovyAntTaskTestVersionPropertyFile.name ) }
}
