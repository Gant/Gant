//  Gant -- A Groovy way of scripting Ant tasks.
//
//  Copyright Â© 2008-9 Russel Winder
//
//  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
//  compliance with the License. You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software distributed under the License is
//  distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//  implied. See the License for the specific language governing permissions and limitations under the
//  License.
//
//  Author : Russel Winder <russel.winder@concertant.com>

ant.property ( file : 'build.properties' )

//  For some reason the ant variable is not available in the allprojects and subprojects closure :-(

def gantVersion = ant.antProject.properties.gantVersion
def commonsCliVersion = ant.antProject.properties.commonsCliVersion
def antVersion = ant.antProject.properties.antVersion
def junitVersion = ant.antProject.properties.junitVersion
def ivyVersion = ant.antProject.properties.ivyVersion
def groovyAntTaskTestVersionPropertyFile = new File ( ant.antProject.properties.groovyAntTaskTestVersionPropertyFileName )

def osgify = true

allprojects {
  group =  'org.codehaus.gant'
  artifact = 'gant'
  version = gantVersion
}  

subprojects {

  usePlugin ( 'groovy' )

  if ( osgify ) { usePlugin ( 'osgi' ) }
  
  sourceCompatibility = 5
  targetCompatibility = 5

  sourceSets {
    main { groovy { srcDir '../src/main/groovy' } }
    test { groovy { srcDir '../src/test/groovy' } }
  }

  //metaInf << files ( '../LICENCE.txt' )

  def theVendor = 'The Codehaus'
  def theTitle = 'Gant: Scripting Ant tasks with Groovy.'

  if ( osgify ) {
    configure ( jar.osgi ) {
      name = 'Gant'
      instruction 'Bundle-Vendor' , theVendor
      instruction 'Bundle-Description' , theTitle
      instruction 'Bundle-DocURL' , 'http://gant.codehaus.org'
      
      instruction 'Built-By' , System.properties.'user.name'
      instruction 'Extension-Name' , artifact
      instruction 'Specification-Title' , theTitle
      instruction 'Specification-Version' , version
      instruction 'Specification-Vendor' , theVendor
      instruction 'Implementation-Title' , theTitle
      instruction 'Implementation-Version' , version
      instruction'Implementation-Vendor' , theVendor
    }
  }
  else {
    manifest.mainAttributes (
                             'Built-By' : System.properties.'user.name' ,
                             'Extension-Name' : artifact ,
                             'Specification-Title' : theTitle ,
                             'Specification-Version' : version ,
                             'Specification-Vendor' : theVendor ,
                             'Implementation-Title' : theTitle ,
                             'Implementation-Version' : version , 
                             'Implementation-Vendor' : theVendor
                             )
  }
  
  repositories {
    mavenCentral ( )
  }
  
  dependencies {
    compile (
             'commons-cli:commons-cli:' + commonsCliVersion ,
             'org.apache.ant:ant:' + antVersion
             )
    testCompile (
                 'junit:junit:' + junitVersion
                 )
    testRuntime (
                 'org.apache.ivy:ivy:' + ivyVersion
                 )
  }
  
  test.doLast {
    groovyAntTaskTestVersionPropertyFile.delete ( )
  }
  
  clean.doLast {
    ant.delete { fileset ( dir : '.' , includes : '**/*~, texput.log' ) }
    ant.delete ( dir :  'target_forMavenTest' )
    //ant.delete ( dir : '.' )
  }

  def packageTitle = 'Gant ' + version
  def copyrightString = 'Copyright &#169; 2006&#8211;9  The Codehaus.  All Rights Reserved.'

  javadoc {
    //dependsOn ( 'compile' )
    //options.subPackages ( 'gant' , 'org.codehaus.gant' )
    options.overview ( 'overview.html' )
    options.showAll ( )
    options.encoding ( 'UTF-8' )
    options.setUse ( true )
    options.author ( true )
    options.version ( true )
    options.windowTitle ( packageTitle )
    options.docTitle ( packageTitle )
    options.footer ( copyrightString )
  }
  javadoc.doFirst {
    javadoc.title = packageTitle
    javadoc.options.docTitle = javadoc.title
  }
  
  groovydoc {
    dependsOn ( 'classes' )
    packageNames = [ 'gant.*' , 'org.codehaus.gant.*' ]
    overview = 'overview.html'
    includePrivate = false
    encoding = 'UTF-8'
    use = true
    author = 'true'
    version = 'true'
    windowTitle = packageTitle
    docTitle = packageTitle
    header = packageTitle
    footer = copyrightString
  }
  
  task documentation ( dependsOn: [ 'javadoc' , 'groovydoc' ] , description : 'Create the API documentation.' )
  
  usePlugin ( 'maven' )
  
  uploadArchives {
    repositories.mavenDeployer {
      repository ( url : 'http://repository.codehaus.org' )
    }
  }
  
  defaultTasks ( 'test' ) 
}

project ( ':gant' ) {
  //  If the user has GROOVY_HOME set then use that Groovy rather than the one speficied in the properties
  //  files.  However we have to fiddle to find the version number. 

  def groovyHome = System.getenv ( ).'GROOVY_HOME'
  def groovyLib = null
  if ( groovyHome ) {
    groovyLib = new File ( groovyHome , 'lib' )
    def groovyVersionPatternString = /^groovy-(all-)?([0-9].*)\.jar/
    def items = groovyLib.listFiles ( [ accept : { File dir , String name -> return ( name =~ groovyVersionPatternString ).find ( ) } ] as FilenameFilter )
    assert items 
    groovyVersion = ( items[0].name =~ groovyVersionPatternString )[0][2]
    assert groovyVersion
  }
  else {
    groovyVersion = ant.antProject.properties.groovyStandaloneVersion
  }
  archivesBaseName = artifact
  repositories {
    flatDir ( name : 'groovyInstallation' , dirs : [ new File ( groovyHome , 'embeddable' ) , groovyLib ] )
  }
  dependencies {
    groovy ( 'org.codehaus.groovy:groovy-all:' + groovyVersion )
  }
  compileGroovy.doFirst {
    println ( '\n\tUsing Groovy version ' + groovyVersion + '\n' )
  }
  test.doFirst {
    groovyAntTaskTestVersionPropertyFile.write ( 'groovyAntTaskTestVersion = ' + groovyVersion )
  }
  task installGant ( dependsOn : 'assemble' ) << {
    def installDirectory = gant_installPath
    def installBinDirectory = installDirectory + '/bin'
    def scriptsDirectory = '../scripts'
    ant.copy ( todir : installBinDirectory ) {
      fileset ( dir :  scriptsDirectory + '/bin_requiresGroovy' )
      fileset ( dir : scriptsDirectory + '/bin' )
      filterset { filter ( token : 'GANT_VERSION' , value : gantVersion ) }
      filterset { filter ( token : 'GROOVYJAR' , value : 'groovy-' + groovyVersion + '.jar' ) }
    }
    ant.chmod ( perm : 'a+x' ) { fileset ( dir : installBinDirectory , includes : 'gant*' ) }
    ant.copy ( todir : installDirectory ) { fileset ( dir : scriptsDirectory , includes : 'conf/gant-starter.conf' ) }
    ant.copy ( todir : installDirectory + '/lib' ) {
      fileset ( dir : 'build/libs' , includes : '*' ) 
      fileset ( dir : '../jarfiles' , includes : '*' )
      mapper ( type : 'flatten' )
    }
  }
  task uninstallGant << {
    ant.delete ( dir : gant_installPath ) 
  }
}

[ [ '1.5' , ant.project.properties.groovy15Version ] ,
  [ '1.6' , ant.project.properties.groovy16Version ] ,
  [ '1.7' , ant.project.properties.groovy17Version ] ].each { item ->
  project ( ':gant_groovy' + item[0] ) {
    archivesBaseName = artifact + '_groovy' + item[0]
    dependencies {
      groovy ( 'org.codehaus.groovy:groovy-all:' + item[1] )
    }
    compileGroovy.doFirst {
      println ( '\n\tUsing Groovy version ' + item[1] + '\n' )
    }
    test.doFirst {
      groovyAntTaskTestVersionPropertyFile.write ( 'groovyAntTaskTestVersion = ' + item[1] )
    }
  }
}

task wrapper ( type : Wrapper ) {
    gradleVersion = '0.8'
    jarPath = 'wrapper'
}

task clobber ( description : 'Do a really detailed clean.' ) << {
  ant.delete ( dir : 'gant' )
  [ '1.5' , '1.6' , '1.7' ].each { item ->
    ant.delete ( dir : 'gant_groovy' + item )
  }
  ant.delete {
    fileset ( dir : '.' , includes : 'texput.log,groovyAntTaskTestVersion.properties,**/*~' )
  }
}
