//  Gant -- A Groovy way of scripting Ant tasks.
//
//  Copyright Â© 2008-9 Russel Winder
//
//  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
//  compliance with the License. You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software distributed under the License is
//  distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//  implied. See the License for the specific language governing permissions and limitations under the
//  License.
//
//  Author : Russel Winder <russel.winder@concertant.com>

import org.apache.tools.ant.filters.ReplaceTokens

def groovyAntTaskTestVersionPropertyFile = new File ( groovyAntTaskTestVersionPropertyFileName )
def osgify = true

 //  Organize the build using subprojects.  There is a subproject gant which is for the build using the
 //  locally installed Groovy and then there is one for each version of Groovy obtained from the Maven
 //  repository that is supported.  These functions ease doing the iteration over all the subprojects.  NB
 //  Gradle requires the directories for each of the subprojects to exist.  There is an assumption that each
 //  subproject has its own source, etc.  This build slightly perverts the general approach by using exactly
 //  the same source for each subproject, the only difference is the version of Groovy used for compilation.

def forEachArtifact ( Closure c ) {
  for ( String s : [ '1.5' , '1.6' , '1.7' ] ) { c ( 'gant_groovy' + s ) }
}
  
def forEachProject ( Closure c ) {
  c ( 'gant' )
  forEachArtifact ( c )
}

forEachProject { item ->  if ( ! ( new File ( item ) ).isDirectory ( ) ) { ant.mkdir ( dir : item ) } }

allprojects {
  group =  'org.codehaus.gant'
  artifact = 'gant'
  version = gantVersion
}  

subprojects {
  usePlugin ( 'groovy' )
  if ( osgify ) { usePlugin ( 'osgi' ) }
  sourceCompatibility = 5
  targetCompatibility = 5
  configurations {
    deployJars
 }
  sourceSets {
    //  NB All the subprojects are actually using the same source code and this is in a different place so
    //  the location of the source must be specified explicitly.
    main { groovy { srcDir '../src/main/groovy' } }
    test { groovy { srcDir '../src/test/groovy' } }
    integTest { groovy { srcDir '../src/integTest/groovy' } }  
  }
  metaInf << fileTree ( dir : '..' ).matching { include 'LICENCE.txt' }
  def theVendor = 'The Codehaus'
  def theTitle = 'Gant: Scripting Ant tasks with Groovy.'
  if ( osgify ) {
    configure ( jar.osgi ) {
      name = 'Gant'
      instruction 'Bundle-Vendor' , theVendor
      instruction 'Bundle-Description' , theTitle
      instruction 'Bundle-DocURL' , 'http://gant.codehaus.org'
      instruction 'Built-By' , System.properties.'user.name'
      instruction 'Extension-Name' , artifact
      instruction 'Specification-Title' , theTitle
      instruction 'Specification-Version' , version
      instruction 'Specification-Vendor' , theVendor
      instruction 'Implementation-Title' , theTitle
      instruction 'Implementation-Version' , version
      instruction'Implementation-Vendor' , theVendor
    }
  }
  else {
    manifest.mainAttributes (
                             'Built-By' : System.properties.'user.name' ,
                             'Extension-Name' : artifact ,
                             'Specification-Title' : theTitle ,
                             'Specification-Version' : version ,
                             'Specification-Vendor' : theVendor ,
                             'Implementation-Title' : theTitle ,
                             'Implementation-Version' : version , 
                             'Implementation-Vendor' : theVendor
                             )
  }
  repositories {
    mavenCentral ( )
    mavenRepo ( urls : 'http://repository.codehaus.org/' )
  }
  dependencies {
    compile (
             'commons-cli:commons-cli:' + commonsCliVersion ,
             'org.apache.ant:ant:' + antVersion
             )
    testCompile ( 'junit:junit:' + junitVersion )
    testRuntime ( 'org.apache.ivy:ivy:' + ivyVersion )
    deployJars ( 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2' )
  }
  compileGroovy.options.compilerArgs = ['-Xlint']
  test {
    //
    //  The Gant Ant task integration test (which is still a unit test :-( has to know the absolute
    //  locations of certain files.  Because Gradle uses a multi-project build there is an extra level
    //  complexity in paths compared to Eclipse, IntelliJ IDEA or Gant builds because the multi-project
    //  builds happen in subdirectories.  org.codehaus.gant.ant.tests.Gant_Test has a decision to make, it
    //  needs to know whether this is a Gradle build or not.  Use a property.
    //
    options.systemProperties['buildFrameworkIdentifier'] = 'Gradle'
    doLast { groovyAntTaskTestVersionPropertyFile.delete ( ) }
  }
  clean.doLast {
    ant.delete { fileset ( dir : '.' , includes : '**/*~, texput.log' ) }
    ant.delete ( dir :  'target_forMavenTest' )
  }
  task integTest {
    dependsOn ( 'assemble' )
  }
  //task integTest ( type : AntTest , description : 'Run the integration tests.' ) {
  //}
  def packageTitle = 'Gant ' + version
  def copyrightString = 'Copyright &#169; 2006&#8211;9  The Codehaus.  All Rights Reserved.'
  javadoc {
    options.overview ( 'overview.html' )
    options.showAll ( )
    options.encoding ( 'UTF-8' )
    options.setUse ( true )
    options.author ( true )
    options.version ( true )
    options.windowTitle ( packageTitle )
    options.docTitle ( packageTitle )
    options.footer ( copyrightString )
  }
  javadoc.doFirst {
    javadoc.title = packageTitle
    javadoc.options.docTitle = javadoc.title
  }
  groovydoc {
    //  javadoc task depends on classes task.  groovydoc is not dependent on classes task and seems not to
    //  need it.  Should we put a dependency in for symmetry or rely on it working not to bother?
    ////dependsOn ( 'classes' )
    packageNames = [ 'gant.*' , 'org.codehaus.gant.*' ] // Why have to have this when not needed for javadoc?
    overview = 'overview.html'
    includePrivate = false
    encoding = 'UTF-8'
    use = true
    author = 'true'
    version = 'true'
    windowTitle = packageTitle
    docTitle = packageTitle //  Groovy 1.5 version of GroovyDoc does not have support for docTitle attribute.
    header = packageTitle
    footer = copyrightString
  }
  task documentation ( dependsOn: [ 'javadoc' , 'groovydoc' ] , description : 'Create the API documentation.' )
  defaultTasks ( 'build' ) 
}

project ( ':gant' ) {
  //  If the user has GROOVY_HOME set then use that Groovy rather than the one specified in the properties
  //  files.  However we have to fiddle to find the version number.
  def groovyHome = System.getenv ( ).'GROOVY_HOME'
  def groovyLib = null
  if ( groovyHome ) {
    groovyLib = new File ( groovyHome , 'lib' )
    def groovyVersionPatternString = /^groovy-(all-)?([0-9].*)\.jar/
    def items = groovyLib.listFiles ( [ accept : { File dir , String name -> return ( name =~ groovyVersionPatternString ).find ( ) } ] as FilenameFilter )
    assert items 
    groovyVersion = ( items[0].name =~ groovyVersionPatternString )[0][2]
    assert groovyVersion
    repositories { flatDir ( name : 'groovyInstallation' , dirs : [ new File ( groovyHome , 'embeddable' ) , groovyLib ] ) }
    println ( "# :gant -- using Groovy version ${groovyVersion} from ${groovyHome}." )
  }
  else {
    groovyVersion = groovyStandaloneVersion
    println ( "# :gant -- assuming Groovy version ${groovyVersion} is to be used." )
  }
  archivesBaseName = artifact
  dependencies { groovy ( 'org.codehaus.groovy:groovy-all:' + groovyVersion ) }
  compileGroovy.doFirst { println ( '\n\tUsing Groovy version ' + groovyVersion + '\n' ) }
  test.doFirst { groovyAntTaskTestVersionPropertyFile.write ( 'groovyAntTaskTestVersion = ' + groovyVersion ) }
  def  installDirectory = '/usr/share/gant'
  try { installDirectory = evaluate ( '"' + gant_installPath + '"' ) }
  catch ( MissingPropertyException mpe ) { /* Intentionally left blank. */ }
  task install ( dependsOn : 'assemble' , description : "Install Gant (compiled against Groovy ${groovyVersion}) to ${installDirectory}." ) << {
    def installBinDirectory = installDirectory + '/bin'
    def scriptsDirectory = '../scripts'
    copy {
      into ( installBinDirectory )
      from ( [ scriptsDirectory + '/bin' , scriptsDirectory + '/bin_requiresGroovy' ] )
      filter ( ReplaceTokens , tokens : [ GROOVYJAR : 'groovy-' + groovyVersion + '.jar' ] )
    }
    ant.chmod ( perm : 'a+x' ) { fileset ( dir : installBinDirectory , includes : 'gant*' ) }
    copy {
      into ( installDirectory + '/conf' )
      from ( scriptsDirectory + '/conf/gant-starter.conf' )
    }
    copy {
      into ( installDirectory + '/lib' )
      from ( [ 'build/libs' , '../jarfiles' ] )
    }
  }
  task uninstall ( description : "Delete ${installDirectory} so as to remove the Gant installation." ) << { ant.delete ( dir : installDirectory ) }
}

ciBuildTasks = [ ]

forEachArtifact { archivesBaseName ->
  def groovyVersionNumber = getProperty ( archivesBaseName.replace ( artifact + '_' , '' ).replace ( '.' , '' ) + 'Version' )
  project ( archivesBaseName ) {
    usePlugin ( 'maven' )
    dependencies { groovy ( 'org.codehaus.groovy:groovy-all:' + groovyVersionNumber ) }
    compileGroovy.doFirst { println ( '\n\tUsing Groovy version ' + groovyVersionNumber + '\n' ) }
    test.doFirst { groovyAntTaskTestVersionPropertyFile.write ( 'groovyAntTaskTestVersion = ' + groovyVersionNumber ) }
    uploadArchives {
      repositories.mavenDeployer {
        uniqueVersion = false
        configuration = configurations.deployJars
        repository ( url : 'https://dav.codehaus.org/repository/gant' )
        snapshotRepository ( url : 'https://dav.codehaus.org/snapshots.repository/gant' )
      }
    }
  }
  ciBuildTasks << archivesBaseName + ':build'
}

task ciBuild ( description : 'Run just the builds that use Groovy from the Maven repository.  Used mainly on CI servers.' , dependsOn : ciBuildTasks )

task wrapper ( type : Wrapper ) {
    gradleVersion = '0.9'
    jarPath = 'wrapper'
}

task clobber ( description : 'Do a really detailed clean.' ) << {
  forEachProject { item -> ant.delete ( dir : item ) }
  ant.delete { fileset ( dir : '.' , includes : 'texput.log,groovyAntTaskTestVersion.properties,**/*~' ) }
}
