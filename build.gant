//  Gant -- A Groovy build framework based on scripting Ant tasks.
//
//  Copyright Â© 2006-8 Russel Winder
//
//  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
//  compliance with the License. You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software distributed under the License is
//  distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//  implied. See the License for the specific language governing permissions and limitations under the
//  License.
//
//  Author : Russel Winder <russel.winder@concertant.com>

distributionURL = 'https://dav.codehaus.org/dist/gant'

Ant.property ( file : 'build.properties' )
Ant.property ( file : 'local.build.properties' )

try { gantVersion }
catch ( MissingPropertyException mpe ) { gantVersion = Ant.project.properties.gantVersion }

// NB  System.getenv ( ) does not work on Java 1.4 but does on Java 5 or later.
  
installationHome = System.properties.'groovy.home'
try { if ( grailsBuild ) { installationHome = System.getenv ( ).'GRAILS_HOME' } }
catch ( MissingPropertyException mpe ) { grailsBuild = false }

if ( ( installationHome == null ) || ( installationHome == '' ) ) {
  if ( grailsBuild ) { println ( 'GRAILS_HOME is not set, so a build cannot happen.' ) }
  else { println ( 'Real problem: Groovy home is not set and this is Groovy executing.' ) }
  return
}

//  The versions of Gant in the Maven repository to build distribution version of Gant against.

distributionVersions = [
                        [ groupId : 'groovy' , artifactId : 'groovy-all' , version : '1.0' ] ,
                        [ groupId : 'org.codehaus.groovy' , artifactId : 'groovy-all' , version : '1.5.0' ] ,
                        [ groupId : 'org.codehaus.groovy' , artifactId : 'groovy-all' , version : '1.5.1' ]
                        ]

sourceDirectory = 'src/main/groovy'
testsDirectory = 'src/test/groovy'  
jarsDirectory = 'jarfiles'
scriptsDirectory = 'scripts'

buildDirectory = 'target'
buildClassesDirectory = buildDirectory + '/classes' 
buildTestClassesDirectory = buildDirectory + '/test-classes' 
buildTestReportsDirectory = buildDirectory + '/test-reports'
buildCoberturaClassesDirectory = buildDirectory + '/cobertura-classes' 
buildCoberturaReportsDirectory = buildDirectory + '/cobertura-reports'

documentationDirectory = buildDirectory + '/documentation'
apiDocumentationDirectory = documentationDirectory + '/api'

buildMetadataDirectory = buildClassesDirectory + '/META-INF'

distributionTopLevelFiles = [
                             'build.gant' , 'buildMaven.gant' , 'build.properties' , 'build.xml' ,
                             '.classpath' , '.project' ,
                             'LICENCE.txt' ,
                             'README_Distribution.txt' , 'README_Install.txt' ,
                             'releaseNotes.txt'
                             ]
distributionDirectories = [ 'documentation' , 'examples' , '.settings' , 'jarfiles' , sourceDirectory , testsDirectory ]

antlibXMLns = 'antlib:org.apache.maven.artifact.ant'
mavenPOMId = 'maven.pom'

includeTargets << gant.targets.Clean
 cleanPattern <<  [ '**/*~' , 'cobertura.ser' ] 
cleanDirectory << buildDirectory

Ant.path ( id : 'compileJarSet' ) {
  fileset ( dir : installationHome + '/lib' , includes : 'groovy*.jar' )
  fileset ( dir : installationHome + '/lib' , includes : 'commons-cli*.jar' )
  fileset ( dir : installationHome + '/lib' , includes : 'asm*.jar' )
  fileset ( dir : installationHome + '/lib' , includes : 'ant*.jar' )  // Picks up antlr as well as ant! This is intended.
}
Ant.taskdef ( name : 'groovyc' , classname : 'org.codehaus.groovy.ant.Groovyc' , classpathref : 'compileJarSet' )

target ( compile : 'Compile everything needed for a Gant installation.' ) {
  mkdir ( dir : buildClassesDirectory )
  groovyc ( srcdir : sourceDirectory , destdir : buildClassesDirectory ) {
    javac ( source : '1.4' , target : '1.4' , debug : 'on' , classpathref : 'compileJarSet' )
  }
}

target ( compileTests : 'Compile all the tests for a newly built Gant.' ) {
  depends ( compile )
  mkdir ( dir : buildTestClassesDirectory )
  groovyc ( srcdir : testsDirectory , destdir : buildTestClassesDirectory ) {
    classpath { pathelement ( location : buildClassesDirectory ) }
    javac ( source : '1.4' , target : '1.4' , debug : 'on' ) {
      classpath {
        path ( refid : 'compileJarSet' )
        pathelement ( location : buildClassesDirectory )
        fileset ( dir : installationHome + '/lib' , includes : 'junit*.jar' ) // Irritating that this is needed :-(
      }
    }
  }
}

target ( test : 'Test a build.' ) {
  depends ( compileTests )
  mkdir ( dir : buildTestReportsDirectory )
  junit ( printsummary : 'yes' , failureproperty : 'testsFailed' , fork : 'yes' ) {
    formatter ( type : 'plain' )
    sysproperty ( key : 'groovy.home' , value : System.properties.'groovy.home' )
    batchtest ( todir : buildTestReportsDirectory ) {
      fileset ( dir : buildTestClassesDirectory , includes : '**/*_Test.class' )
    }
    classpath {
      path ( refid : 'compileJarSet' )
      pathelement ( location : buildClassesDirectory )
      pathelement ( location : buildTestClassesDirectory )
    }
  }
}

target ( coberturaTest : 'Test a build using Cobertura to get a coverage report.' ) {
  depends ( compileTests )
  mkdir ( dir : buildTestReportsDirectory )
  mkdir ( dir : buildCoberturaClassesDirectory )
  mkdir ( dir : buildCoberturaReportsDirectory )
  mkdir ( dir : buildJarfilesDirectory )
  "${antlibXMLns}:dependencies" ( pathId :  'coberturaPathId' ) {
    dependency ( groupId : 'net.sourceforge.cobertura' , artifactId : 'cobertura' , version : '1.9' )
  }
  taskdef ( resource : 'tasks.properties' , classpathref : 'coberturaPathId' )
  'cobertura-instrument' ( todir : buildCoberturaClassesDirectory ) { fileset ( dir : buildClassesDirectory ) }
  junit ( printsummary : 'yes' , failureproperty : 'testsFailed' , fork : 'true' ) {
    formatter ( type : 'plain' )
    sysproperty ( key : 'groovy.home' , value : System.properties.'groovy.home' )
    batchtest ( todir : buildTestReportsDirectory ) {
      fileset ( dir : buildTestClassesDirectory , includes : '**/*_Test.class' )
    }
    classpath {
      path ( refid : 'compileJarSet' )
      pathelement ( location : buildCoberturaClassesDirectory ) // MUST appear before uninstrumented classes.
      path ( refid : 'coberturaPathId' )
      pathelement ( location : buildClassesDirectory )
      pathelement ( location : buildTestClassesDirectory )
    }
  }
  'cobertura-report' ( srcdir : sourceDirectory , destdir : buildCoberturaReportsDirectory )
}

makeManifest = { ->
  Ant.mkdir ( dir : buildMetadataDirectory )
  Ant.copy ( todir : buildMetadataDirectory ,  file : 'LICENCE.txt' )
  Ant.manifest ( file : buildMetadataDirectory + '/MANIFEST.MF' ) {
    attribute ( name : 'Built-By' , value : System.properties.'user.name' )
    attribute ( name : 'Extension-Name' , value : 'gant' )
    attribute ( name : 'Specification-Title' , value : 'Gant: scripting Ant tasks with Groovy.' )
    attribute ( name : 'Specification-Version' , value : gantVersion )
    attribute ( name : 'Specification-Vendor' , value : 'The Codehaus' )
    attribute ( name : 'Implementation-Title' , value : 'Gant: Scripting Ant tasks with Groovy.' )
    attribute ( name : 'Implementation-Version' , value : gantVersion ) 
    attribute ( name : 'Implementation-Vendor' , value : 'The Codehaus' )
  }
}

target ( 'package' : 'Create the jar file.' ) {
  depends ( compile )
  makeManifest ( )
  jar ( destfile : buildDirectory + "/gant-${gantVersion}.jar" , basedir : buildClassesDirectory , manifest : buildMetadataDirectory + '/MANIFEST.MF' )
}

target ( documentation : 'Create the API documentation.' ) {
  taskdef ( name : 'groovydoc' , classname : 'org.codehaus.groovy.ant.Groovydoc' )
  def javaApiDocumentationDirectory = apiDocumentationDirectory + '/java'
  def groovyApiDocumentationDirectory = apiDocumentationDirectory + '/groovy'
  mkdir ( dir : javaApiDocumentationDirectory )
  mkdir ( dir : groovyApiDocumentationDirectory )
  javadoc (
               destdir : javaApiDocumentationDirectory ,
               sourcepath : sourceDirectory ,
               packagenames : 'gant.*,org.codehaus.gant.*',
               overview : 'overview.html' ,
               author : 'true' ,
               version : 'true' ,
               use : 'true' ,
               'private' : 'false' ,
               windowtitle : "Gant (${gantVersion})" ,
               doctitle : "Gant (${gantVersion})" ,
               encoding : 'UTF-8' ,
               footer : 'Copyright &copy; 2006&ndash;8 The Codehaus.  All rights reserved.'
               ) {
    classpath { fileset ( dir : System.properties.'groovy.home' + '/lib' , includes : '*.jar' ) }
  }    
  groovydoc (
             destdir : groovyApiDocumentationDirectory ,
             sourcepath : sourceDirectory ,
             packagenames : 'gant.*,org.codehaus.gant.*' ,
             //overview : 'overview.html' ,
             //author : 'true' ,
             //version : 'true' ,
             use : 'true' ,
             'private' : 'false' ,
             windowtitle : "Gant (${gantVersion})" ,
             //doctitle : "Gant (${gantVersion})" ,
             //encoding : 'UTF-8' ,
             //footer : 'Copyright &copy; 2006&ndash;8 The Codehaus.  All rights reserved.'
             )
}

target ( install : "Compile everything and install it to ${installationHome}" ) {
  depends ( 'package' )
  copy ( todir : installationHome + '/lib' ) { fileset ( dir : buildDirectory , includes : 'gant*.jar' ) }
  if ( ! grailsBuild ) {
    copy ( todir : installationHome ) { fileset ( dir : scriptsDirectory , includes : 'bin/gant*' ) }
    copy ( todir : installationHome + '/lib' ) { fileset ( dir : jarsDirectory , includes : 'ivy*.jar,maven*.jar' ) }
    chmod ( perm : 'a+x' ) { fileset ( dir : installationHome + '/bin' , includes : 'gant*' ) }
  }
}

target ( uninstall : "Uninstall Gant from ${installationHome}." ) {
  delete {
    if ( ! grailsBuild ) { fileset ( dir : installationHome + '/bin' , includes : 'gant*' ) }
    fileset ( dir : installationHome + '/lib' , includes : 'gant*.jar' )
  }
}

distributionProducts = [
                        distributions : [ ] ,
                        jars : [ ]
                        ]

target ( distribution : 'Create the distribution.' ) {
  //  Use the Ant Maven plugin to ensure that the groovy-all jar of a given release is in the local Maven
  //  repository and ensure that is the only version of Groovy used in the compilation.
  def prefix = 'gant-' + gantVersion
  def distributionClasspathId = 'classpath'
  clean ( )
  distributionVersions.each { item ->
    //  This is a closure that doesn't have the right metaclass so we have to specify Ant.  Need to
    //  rearrange things to deal with this problem as is done in the target Closure.
    def pathIdentifier = distributionClasspathId + item.version
    Ant."${antlibXMLns}:dependencies" ( pathId : pathIdentifier ) {
      dependency ( groupId : item.groupId , artifactId : item.artifactId , version : item.version )
      dependency ( groupId : 'org.apache.ant' , artifactId : 'ant' , version : '1.7.0' )
      dependency ( groupId : 'commons-cli' , artifactId : 'commons-cli' , version : '1.0' )
    }
    //  Replicate the build process here as a short term expediant.  Should review the whole build and avoid
    //  the replication.  Must remember to remove all previously build class files.
    Ant.delete ( dir : buildClassesDirectory )
    Ant.mkdir ( dir : buildClassesDirectory )
    //  Which version of Groovy actually gets used here?
    Ant.groovyc ( srcdir : sourceDirectory , destDir : buildClassesDirectory , /* fork : 'yes' , */ classpathref : pathIdentifier ) {
      javac ( source : '1.4' , target : '1.4' , debug : 'on' , fork : 'yes' , classpathref : pathIdentifier )
    }                         
    makeManifest ( )
    def discriminator = prefix + '_groovy-' + item.version
    def jarName = discriminator + '.jar'                    
    def jarPath = buildDirectory + System.properties.'file.separator' + jarName
    Ant.jar ( destfile : jarPath , basedir : buildClassesDirectory , manifest : buildMetadataDirectory + '/MANIFEST.MF' )
    distributionProducts [ 'jars' ] << jarPath
    def archiveRoot = buildDirectory + System.properties.'file.separator' + discriminator
    Ant.zip ( destfile : archiveRoot + '.zip' ) {
      zipfileset ( dir : buildDirectory , includes : jarName , prefix : prefix + '/lib' )
      zipfileset ( dir : 'scripts/bin' , includes : 'gant*' , prefix : prefix + '/bin' )
      zipfileset ( dir : 'scripts/install' , includes : 'install.groovy' , prefix : prefix + '/bin' )
      zipfileset ( dir : '.' , includes : 'README*' , prefix : prefix )
    }
    Ant.tar ( destfile :  archiveRoot + '.tgz' , compression : 'gzip' ) {
      tarfileset ( dir : buildDirectory , includes : jarName , prefix : prefix + '/lib' )
      tarfileset ( dir : 'scripts/bin' , includes : 'gant*' , prefix : prefix + '/bin' , mode : '755' )
      tarfileset ( dir : 'scripts/install' , includes : 'install.groovy' , prefix : prefix + '/bin' , mode : '755' )
      tarfileset ( dir : '.' , includes : 'README*' , prefix : prefix )
    }
    distributionProducts [ 'distributions' ] << archiveRoot + '.zip' << archiveRoot + '.tgz'
  }
  archiveRoot = buildDirectory + System.properties.'file.separator' + 'gant_src-' + gantVersion
  zip ( destfile : archiveRoot + '.zip' ) {
    zipfileset ( dir : '.' , includes : distributionTopLevelFiles.join ( ',' ) , prefix : prefix )
    distributionDirectories.each { directory -> zipfileset ( dir : directory , prefix : prefix + System.properties.'file.separator' + directory ) }
  }
  tar ( destfile :  archiveRoot + '.tgz' , compression : 'gzip' ) {
    tarfileset ( dir : '.' , includes : distributionTopLevelFiles.join ( ',' ) , prefix : prefix )
    distributionDirectories.each { directory -> tarfileset ( dir : directory , prefix : prefix + System.properties.'file.separator' + directory ) }
  }
  distributionProducts [ 'distributions' ] << archiveRoot + '.zip' << archiveRoot + '.tgz'
}

target ( uploadDistribution : 'Upload a complete distribution.' ) {
  //depends ( distribution )
  distributionProducts [ 'distributions' ].unique ( )
  distributionProducts [ 'jars' ].unique ( )
  //
  //  Slide has been retired by the Apache Foundation in favour of Jackrabbit, but we use Slide anyway.
  //
  "${antlibXMLns}:dependencies" ( pathId :  'slidePathId' ) {
    //dependency ( groupId : 'org.apache.jackrabbit' , artifactId : 'jackrabbit-webdav' , version : '1.3.3' )
    dependency ( groupId : 'slide' , artifactId : 'slide-webdavlib' , version : '2.1' )
  }
  //
  //  Is there a way of extracting the username and password information from the Maven Ant Task?  For the
  //  moment simply read the ~/.m2/settings.xml file.
  //
  def loader = getClass ( ).getClassLoader ( )
  def path = Ant.path ( refid : 'slidePathId' )
  ( path.list ( ) as List ).each { location -> loader.addURL ( new URL ( 'file://' + location ) ) }
  def settings =  ( new XmlSlurper ( ) ).parse ( System.properties.'user.home' + '/.m2/settings.xml' ).servers.server.find { item -> item.id == 'dav.codehaus.org' }
  def credentials = loader.loadClass ( 'org.apache.commons.httpclient.UsernamePasswordCredentials' ).getConstructor ( String , String ).newInstance ( settings.username.toString ( ) , settings.password.toString ( ) )
  //  Have to put this in the binding so that the Closures can access it.

  /*

  resource = loader.loadClass ( 'org.apache.webdav.lib.WebdavResource' ).getConstructor ( String , loader.loadClass ( 'org.apache.commons.httpclient.Credentials' ) , boolean ).newInstance ( distributionURL , credentials , true )
  def upload = { sourcePath , destinationPath ->
                 println ( resource.getHttpURL ( ).toString ( ) + ' : ' + sourcePath + ' -> ' + destinationPath )
    if ( ! resource.putMethod ( destinationPath , new File ( sourcePath ) ) ) { println ( 'Failed to upload ' + sourcePath + ' to ' + destinationPath + ', status code : ' + resource.statusCode ) }
  }
  distributionProducts [ 'distributions' ].each { sourcePath -> upload ( sourcePath , 'distributions/' + sourcePath.replace ( 'target/' , '' ) ) }
  distributionProducts [ 'jars' ].each { sourcePath -> upload ( sourcePath , 'jars/' + sourcePath.replace ( 'target/' , '' ) ) }
  upload ( 'pom.xml' , 'poms/gant-' + gantVersion + '.pom' )
  println ( resource.listWebdavResources ( ) )
  if ( ! resource.getMethod ( 'poms/gant-1.0.2.pom' , new File ( 'blah' ) ) ) { println ( 'Failed :-( ' + resource.statusCode ) }
  resource.close ( )

  */

  resource = loader.loadClass ( 'org.apache.webdav.lib.WebdavResource' ).getConstructor ( String , loader.loadClass ( 'org.apache.commons.httpclient.Credentials' ) , boolean ).newInstance ( 'http://dist.codehaus.org/gant' , credentials , true )

  println ( 'Trying to get.' )
  //if ( ! resource.getMethod ( 'poms/gant-1.0.2.pom' , new File ( 'blah' ) ) ) { println ( 'Failed :-( ' + resource.statusCode ) } else { println ( 'Yay' ) }
  resource.close ( )


}

setDefaultTarget ( test )
